A Fibonacci number is a sequence of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence typically begins as follows:

0, 1, 1, 2, 3, 5, 8, 13, 21, ...

Write a function to compute the nth Fibonacci number, in both Java and Python. 

CONSTRAINT:
Your implementation has to be optimized. Your solution should have a time complexity of O(n). 

//Java//
public class Fibonacci {
    public static int fibonacci(int n) {
        // Base cases: return n if n is 0 or 1
        if (n <= 1) {
            return n;
        }

        // Initialize the first two Fibonacci numbers
        int a = 0, b = 1;

        // Iterate from 2 to n (inclusive)
        for (int i = 2; i <= n; i++) {
            // Compute the next Fibonacci number
            int nextFib = a + b;
            // Update a and b for the next iteration
            a = b;
            b = nextFib;
        }

        // b is now the nth Fibonacci number
        return b;
    }

    public static void main(String[] args) {
        int n = 10;
        System.out.println("Fibonacci number at position " + n + " is " + fibonacci(n));
    }
}




##Python##
def fibonacci(n):
    # Base cases: return n if n is 0 or 1
    if n <= 1:
        return n
    
    # Initialize the first two Fibonacci numbers
    a, b = 0, 1
    
    # Iterate from 2 to n (inclusive)
    # Update the Fibonacci numbers with their sum while iterating
    for _ in range(2, n + 1):
        # Compute the next Fibonacci number
        next_fib = a + b
        # Update a and b for the next iteration
        a = b
        b = next_fib
    
    # b is now the nth Fibonacci number
    return b

# Example usage
n = 10
print(f"Fibonacci number at position {n} is {fibonacci(n)}")

